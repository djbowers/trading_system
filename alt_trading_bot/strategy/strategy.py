from abc import ABC, abstractmethod

from . import BuyAndHoldStrategy


class Strategy(ABC):
    """
    Strategy is an abstract base class providing an interface for
    all subsequent (inherited) strategy handling objects.

    The goal of a (derived) Strategy object is to generate Signal
    objects for particular symbols based on the inputs of Bars
    (OLHCVI) generated by a DataHandler object.

    This is designed to work both with historic and live data as
    the Strategy object is agnostic to the data source,
    since it obtains the bar tuples from a queue object.
    """

    @staticmethod
    def create_new_strategy(strategy_type, **kwargs):
        """
        Factory method for creating new Strategies.
        """
        if strategy_type == 'buy_and_hold':
            return BuyAndHoldStrategy(kwargs['data_handler'], kwargs['event_queue'])

    @abstractmethod
    def calculate_signals(self, event):
        """
        Provides the mechanisms to calculate the list of signals.
        """
        raise NotImplementedError("Should implement calculate_signals()")
